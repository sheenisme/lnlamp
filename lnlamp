#!/bin/bash
# 获取lnlamp脚本所在的目录
lnlamp_dir=$(cd `dirname $0`; pwd)
# echo "lnlamp所在的路径是:" $lnlamp_dir
# 获取执行脚本时所在的目录
Rootpath=`pwd`
# echo "当前的工作路径是:" $Rootpath
cd $Rootpath



# 如果没有输入参数,直接退出,并提示用户lnlamp的用法
if [ $# -eq 0 ];
then
    echo "Usage:   lnlamp <c_source_file> [options...]";
    echo "Example: lnlamp hello.c";
    echo "Note:    For detailed usage, please see 'lnlamp -h' ";
    exit 1;
fi;
# 如果捕获到CTRL+C,则直接退出
trap "onCtrlC" SIGINT
function onCtrlC () {
    rm -f ____lnlamp_*
    exit
}



# 调试模式开关
DEBUG_TYPE=1
# TODO: 添加计时方式 (-t|--timing-type) 的设置
timing_type=0
# TODO: 添加profiling时的输入文件 (-i|--input) 的设置
input="input.txt"
# TODO: 添加profiling时的混合比例 (-r|--rate)  的设置
rate_array=(0 12 25 37 50 62 75 87 99)
# rate_array=(16 32 49 66 82)
# TODO: 完善下面 Profiling时编译的一些参数的自定义设置(CC已经实现根据后缀名字自动确定)
VERBOSE=""
CC="gcc"
CFLAGS="-O3"
LIB_FLAGS="-I. -I/home/sheen/lnlamp/polybench_benchmark/utilities /home/sheen/lnlamp/polybench_benchmark/utilities/polybench.c"
PROFILER_FLAGS="-DPOLYBENCH_TIME -DPOLYBENCH_STACK_ARRAYS -DPOLYBENCH_USE_C99_PROTO"
EXIT_FLAGS="-lm"
# TODO: 配置PPCG CodeGen时的一些自定义设置
PPCG_TILE_FLAGS=""
PPCG_OPENMP_FLAGS=""
if [ "$PPCG_OPENMP_FLAGS" = "--openmp" ];
then
    CFLAGS="$CFLAGS -fopenmp"
fi

# 源文件参数
src_args=()
# 参数计数器
parameter_count=0
# 是否指定target_file的Flags
specify_output_flag=0
target_file=""
# c++ Flags
cpp_flag=0
# 临时profiling的后缀
prf_suf=""
# Profiling的次数(不包含数据预热）
frequency=10
readonly frequency
# Step1: 先处理一下输入.
while [[ $# -gt 0 ]];
do
    # 处理输入的参数
    case $1 in
        *.c|*.cc|*.cpp)
            parameter_count=`expr $parameter_count + 1`
            if [ $specify_output_flag -eq 1 ];
            then
                target_file=$1
                # 指定完target-file,则flag设为2.
                specify_output_flag=2
                shift
            else
                if [ -e $1 ];
                then
                    echo "YES" > /dev/null
                else
                    echo "lnlamp: error: $1 : No such file or directory"
                    echo "lnlamp: fatal error: no input files"
                    echo "Compilation terminated."
                    echo ""
                    echo "Please use option '-h | --help' to quickly use lnlamp."
                    echo ""
                    exit
                fi
                src_args+=("$1")
                shift
            fi
            ;;
        -s|--specify-output)
            parameter_count=`expr $parameter_count + 1`
            if [ $parameter_count -eq 1 ]
            then
                echo ""
                echo "Please put source file before option '-s'"
                echo ""
                echo "Template:"
                echo "    lnlamp <source-file> -s <target-file>"
                echo ""
                echo "    if <target-file> is empty, output 'source_lnlamp.c' or 'source_lnlamp.cpp' by default"
                echo ""	
                exit
            fi
            # 如果需要指定target-file,则flag设为1
            specify_output_flag=1
            shift
            ;;
        -v|--version)
            parameter_count=`expr $parameter_count + 1`
            echo "The installation position is: $lnlamp_dir"
            echo "Profiling  Configuration  is: ${VERBOSE} ${CC} ${CFLAGS} ${LIB_FLAGS} ${PROFILER_FLAGS} source_file ${EXIT_FLAGS}"
            echo
            echo "The lnlamp version is 0.1.0"
            echo "For more information, please see https://github.com/sheenisme/lnlamp.git"
            shift
            exit
            ;;
        -h|--help)
            parameter_count=`expr $parameter_count + 1`
            echo ""
            echo "Usage: lnlamp file [options] ..."
            echo ""
            echo "Options:"
            echo "    -s | --specify-output    specify the target file"
            echo "    -v | --version           lnlamp compiler version"
            echo ""
            echo "Examples:"
            echo "    lnlamp hellp.c -s hello_lnlamp.c"
            echo ""
            echo "Template:"
            echo "    lnlamp <source-file> [Options] <target-file>"
            echo ""
            echo "Looking forward to more options ..."
            echo ""
            shift
            exit
            ;;
        *)
            parameter_count=`expr $parameter_count + 1`
            if [ $specify_output_flag -eq 1 ];
            then
                src_args+=("$1")
                target_file=$1
                specify_output_flag=2
                shift
            else
                echo ""
                echo "Sorry, the '$1' operation is invalid!"
                echo ""
                echo "Please use option '-h | --help' to quickly use lnlamp"
                echo ""
                shift
                exit   
            fi
    esac
    # 输入参数的处理over,下面再处理一下其他的一些参数.

    # 检查src_args长度是否为1,目前暂只支持一个源文件的自动混合精度
    if [ ${#src_args[@]} -ne 1 ];
    then
        echo "lnlamp: error: Parameter input error"
        echo "lnlamp: fatal error: input files is more than 1 "
        echo "Compilation terminated."
        echo ""
        echo "Please use option '-h | --help' to quickly use lnlamp."
        echo ""
        exit
    fi

    # 设置target_file
    if [ $specify_output_flag -le 1 ];
    then
        # 如果设置了'-s',但是没有设置'target_file',则进行警告
        if [ $specify_output_flag -eq 1 ];
        then
            echo "lnlamp: warning: missing target-file name after '-s', taregt-file will be reset to <source>_lnlamp.c or <source>_lnlamp.cpp"
        fi
        for src in ${src_args[@]}; 
        do  
            kernel=${src##*/}
            kernel=${kernel%%.*}
		    target_file="${kernel}_lnlamp.c"
        done
    fi

    # 自动判断后缀类型
    for src in ${src_args[@]}; 
    do
        case $src in
            *.c)
                echo "c files " > /dev/null
                cpp_flag=0
                CC="gcc"
                prf_suf=".c"
                ;;
            *.cc)
                echo "c++ files " > /dev/null
                cpp_flag=1
                CC="g++"
                target_file="${target_file}c"
                prf_suf=".cc"
                ;;
            *.cpp)
                echo "c++ files " > /dev/null
                cpp_flag=2
                CC="g++"
                target_file="${target_file}pp"
                prf_suf=".cpp"
                ;;
            *)
                echo "lnlamp: warning: unsupported file suffixes, please note. "
        esac      
    done
    PARAMETER_READY=true
done
# 释放specify_output_flag
unset specify_output_flag



#  Step2: 如果输入解析成功,那么开始进行Profiling
# 使用 date +%s%N 可以获得一个纳秒级的unix时间戳(当前时间), 进行计时
start=`date +%s%N`
time_array=()
if [ $DEBUG_TYPE -eq 1 ];then
    echo "lnlamp: message: Default Profiling Rate is: ${rate_array[0]} ${rate_array[1]} ${rate_array[2]} ${rate_array[3]} ${rate_array[4]} ${rate_array[5]} ${rate_array[6]} ${rate_array[7]} ${rate_array[8]}."
    echo "lnlamp: message: Default   PPCG   FLAGS is: ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS}."
fi
if [[ ${PARAMETER_READY} = true ]]; 
then
    # 并行地进行PPCG_Codegen并编译
    {
        ppcg --target c --no-automatic-mixed-precision ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} $src_args -o ____lnlamp_ppcg__${prf_suf} > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "lnlamp: error: PPCG Codegen meets errors."
            echo "lnlamp: error: The PPCG CMD is : ppcg --target c --no-automatic-mixed-precision ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} $src_args -o ____lnlamp_ppcg__${prf_suf} "
            exit
        fi
        ${VERBOSE} ${CC} ${CFLAGS} ${LIB_FLAGS} ${PROFILER_FLAGS} ____lnlamp_ppcg__${prf_suf} -o  ____lnlamp_ppcg__.exe ${EXIT_FLAGS} > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "lnlamp: error: Compiling meets errors."
            echo "lnlamp: error: The compiler CMD is : ${VERBOSE} ${CC} ${CFLAGS} ${LIB_FLAGS} ${PROFILER_FLAGS} ____lnlamp_ppcg__${prf_suf} -o  ____lnlamp_ppcg__.exe ${EXIT_FLAGS}"
            exit
        fi
        rm -f ____lnlamp_ppcg__${prf_suf}
    }&
    {
        ppcg --target c -R ${rate_array[0]} ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} $src_args -o ____lnlamp_${rate_array[0]}__${prf_suf} > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "lnlamp: error: PPCG Codegen meets errors."
            echo "lnlamp: error: The PPCG CMD is : ppcg --target c -R ${rate_array[0]} ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} $src_args -o ____lnlamp_${rate_array[0]}__${prf_suf} "
            exit
        fi
        ${VERBOSE} ${CC} ${CFLAGS} ${LIB_FLAGS} ${PROFILER_FLAGS} ____lnlamp_${rate_array[0]}__${prf_suf} -o  ____lnlamp_${rate_array[0]}__.exe  ${EXIT_FLAGS}  > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "lnlamp: error: Compiling meets errors."
            echo "lnlamp: error: The compiler CMD is : ${VERBOSE} ${CC} ${CFLAGS} ${LIB_FLAGS} ${PROFILER_FLAGS} ____lnlamp_${rate_array[0]}__${prf_suf} -o  ____lnlamp_${rate_array[0]}__.exe  ${EXIT_FLAGS}"
            exit
        fi
        rm -f ____lnlamp_${rate_array[0]}__${prf_suf}
    }&
    {
        ppcg --target c -R ${rate_array[1]} ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} $src_args -o ____lnlamp_${rate_array[1]}__${prf_suf} > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "lnlamp: error: PPCG Codegen meets errors."
            echo "lnlamp: error: The PPCG CMD is : ppcg --target c -R ${rate_array[1]} ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} $src_args -o ____lnlamp_${rate_array[1]}__${prf_suf} "
            exit
        fi
        ${VERBOSE} ${CC} ${CFLAGS} ${LIB_FLAGS} ${PROFILER_FLAGS} ____lnlamp_${rate_array[1]}__${prf_suf} -o  ____lnlamp_${rate_array[1]}__.exe  ${EXIT_FLAGS}  > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "lnlamp: error: Compiling meets errors."
            echo "lnlamp: error: The compiler CMD is : ${VERBOSE} ${CC} ${CFLAGS} ${LIB_FLAGS} ${PROFILER_FLAGS} ____lnlamp_${rate_array[1]}__${prf_suf} -o  ____lnlamp_${rate_array[1]}__.exe  ${EXIT_FLAGS}"
            exit
        fi
        rm -f ____lnlamp_${rate_array[1]}__${prf_suf}
    }&
    {
        ppcg --target c -R ${rate_array[2]} ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} $src_args -o ____lnlamp_${rate_array[2]}__${prf_suf} > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "lnlamp: error: PPCG Codegen meets errors."
            echo "lnlamp: error: The PPCG CMD is : ppcg --target c -R ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} ${rate_array[2]} $src_args -o ____lnlamp_${rate_array[2]}__${prf_suf} "
            exit
        fi
        ${VERBOSE} ${CC} ${CFLAGS} ${LIB_FLAGS} ${PROFILER_FLAGS} ____lnlamp_${rate_array[2]}__${prf_suf} -o  ____lnlamp_${rate_array[2]}__.exe  ${EXIT_FLAGS} > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "lnlamp: error: Compiling meets errors."
            echo "lnlamp: error: The compiler CMD is : ${VERBOSE} ${CC} ${CFLAGS} ${LIB_FLAGS} ${PROFILER_FLAGS} ____lnlamp_${rate_array[2]}__${prf_suf} -o  ____lnlamp_${rate_array[2]}__.exe  ${EXIT_FLAGS} "
            exit
        fi
        rm -f ____lnlamp_${rate_array[2]}__${prf_suf}
    }&
    {
        ppcg --target c -R ${rate_array[3]} ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} $src_args -o ____lnlamp_${rate_array[3]}__${prf_suf} > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "lnlamp: error: PPCG Codegen meets errors."
            echo "lnlamp: error: The PPCG CMD is : ppcg --target c -R ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} ${rate_array[3]} $src_args -o ____lnlamp_${rate_array[3]}__${prf_suf} "
            exit
        fi
        ${VERBOSE} ${CC} ${CFLAGS} ${LIB_FLAGS} ${PROFILER_FLAGS} ____lnlamp_${rate_array[3]}__${prf_suf} -o  ____lnlamp_${rate_array[3]}__.exe  ${EXIT_FLAGS} > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "lnlamp: error: Compiling meets errors."
            echo "lnlamp: error: The compiler CMD is : ${VERBOSE} ${CC} ${CFLAGS} ${LIB_FLAGS} ${PROFILER_FLAGS} ____lnlamp_${rate_array[3]}__${prf_suf} -o  ____lnlamp_${rate_array[3]}__.exe  ${EXIT_FLAGS} "
            exit
        fi
        rm -f ____lnlamp_${rate_array[3]}__${prf_suf}
    }&
    wait
    {
        ppcg --target c -R ${rate_array[4]} ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} $src_args -o ____lnlamp_${rate_array[4]}__${prf_suf} > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "lnlamp: error: PPCG Codegen meets errors."
            echo "lnlamp: error: The PPCG CMD is : ppcg --target c -R ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} ${rate_array[4]} $src_args -o ____lnlamp_${rate_array[4]}__${prf_suf} "
            exit
        fi
        ${VERBOSE} ${CC} ${CFLAGS} ${LIB_FLAGS} ${PROFILER_FLAGS} ____lnlamp_${rate_array[4]}__${prf_suf} -o  ____lnlamp_${rate_array[4]}__.exe  ${EXIT_FLAGS} > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "lnlamp: error: Compiling meets errors."
            echo "lnlamp: error: The compiler CMD is : ${VERBOSE} ${CC} ${CFLAGS} ${LIB_FLAGS} ${PROFILER_FLAGS} ____lnlamp_${rate_array[4]}__${prf_suf} -o  ____lnlamp_${rate_array[4]}__.exe  ${EXIT_FLAGS} "
            exit
        fi
        rm -f ____lnlamp_${rate_array[4]}__${prf_suf}
    }&
    {
        ppcg --target c -R ${rate_array[5]} ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} $src_args -o ____lnlamp_${rate_array[5]}__${prf_suf} > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "lnlamp: error: PPCG Codegen meets errors."
            echo "lnlamp: error: The PPCG CMD is : ppcg --target c -R ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} ${rate_array[5]} $src_args -o ____lnlamp_${rate_array[5]}__${prf_suf} "
            exit
        fi
        ${VERBOSE} ${CC} ${CFLAGS} ${LIB_FLAGS} ${PROFILER_FLAGS} ____lnlamp_${rate_array[5]}__${prf_suf} -o  ____lnlamp_${rate_array[5]}__.exe  ${EXIT_FLAGS} > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "lnlamp: error: Compiling meets errors."
            echo "lnlamp: error: The compiler CMD is : ${VERBOSE} ${CC} ${CFLAGS} ${LIB_FLAGS} ${PROFILER_FLAGS} ____lnlamp_${rate_array[5]}__${prf_suf} -o  ____lnlamp_${rate_array[5]}__.exe  ${EXIT_FLAGS} "
            exit
        fi
        rm -f ____lnlamp_${rate_array[5]}__${prf_suf}
    }&
    {
        ppcg --target c -R ${rate_array[6]} ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} $src_args -o ____lnlamp_${rate_array[6]}__${prf_suf} > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "lnlamp: error: PPCG Codegen meets errors."
            echo "lnlamp: error: The PPCG CMD is : ppcg --target c -R ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} ${rate_array[6]} $src_args -o ____lnlamp_${rate_array[6]}__${prf_suf} "
            exit
        fi
        ${VERBOSE} ${CC} ${CFLAGS} ${LIB_FLAGS} ${PROFILER_FLAGS} ____lnlamp_${rate_array[6]}__${prf_suf} -o  ____lnlamp_${rate_array[6]}__.exe  ${EXIT_FLAGS} > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "lnlamp: error: Compiling meets errors."
            echo "lnlamp: error: The compiler CMD is : ${VERBOSE} ${CC} ${CFLAGS} ${LIB_FLAGS} ${PROFILER_FLAGS} ____lnlamp_${rate_array[6]}__${prf_suf} -o  ____lnlamp_${rate_array[6]}__.exe  ${EXIT_FLAGS} "
            exit
        fi
        rm -f ____lnlamp_${rate_array[6]}__${prf_suf}
    }&
    {
        ppcg --target c -R ${rate_array[7]} ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} $src_args -o ____lnlamp_${rate_array[7]}__${prf_suf} > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "lnlamp: error: PPCG Codegen meets errors."
            echo "lnlamp: error: The PPCG CMD is : ppcg --target c -R ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} ${rate_array[7]} $src_args -o ____lnlamp_${rate_array[7]}__${prf_suf} "
            exit
        fi
        ${VERBOSE} ${CC} ${CFLAGS} ${LIB_FLAGS} ${PROFILER_FLAGS} ____lnlamp_${rate_array[7]}__${prf_suf} -o  ____lnlamp_${rate_array[7]}__.exe  ${EXIT_FLAGS} > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "lnlamp: error: Compiling meets errors."
            echo "lnlamp: error: The compiler CMD is : ${VERBOSE} ${CC} ${CFLAGS} ${LIB_FLAGS} ${PROFILER_FLAGS} ____lnlamp_${rate_array[7]}__${prf_suf} -o  ____lnlamp_${rate_array[7]}__.exe  ${EXIT_FLAGS} "
            exit
        fi
        rm -f ____lnlamp_${rate_array[7]}__${prf_suf}
    }&
    {
        ppcg --target c -R ${rate_array[8]} ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} $src_args -o ____lnlamp_${rate_array[8]}__${prf_suf} > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "lnlamp: error: PPCG Codegen meets errors."
            echo "lnlamp: error: The PPCG CMD is : ppcg --target c -R ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} ${rate_array[8]} $src_args -o ____lnlamp_${rate_array[8]}__${prf_suf} "
            exit
        fi
        ${VERBOSE} ${CC} ${CFLAGS} ${LIB_FLAGS} ${PROFILER_FLAGS} ____lnlamp_${rate_array[8]}__${prf_suf} -o  ____lnlamp_${rate_array[8]}__.exe  ${EXIT_FLAGS} > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "lnlamp: error: Compiling meets errors."
            echo "lnlamp: error: The compiler CMD is : ${VERBOSE} ${CC} ${CFLAGS} ${LIB_FLAGS} ${PROFILER_FLAGS} ____lnlamp_${rate_array[8]}__${prf_suf} -o  ____lnlamp_${rate_array[8]}__.exe  ${EXIT_FLAGS} "
            exit
        fi
        rm -f ____lnlamp_${rate_array[8]}__${prf_suf}
    }&
    wait

    # 设置Timing
    if [ $timing_type -eq 1 ];
    then 
        timing="time -f %e"
        if [ $DEBUG_TYPE -eq 1 ];then
            echo "lnlamp: message: The Timing CMD is: '${timing}'."
        fi
    else
        timing=""
        if [ $DEBUG_TYPE -eq 1 ];then
            echo "lnlamp: message: The Timing result is in the program, which means the only output of the program is timing result."
        fi
    fi

    # Profiling (default input file is input.txt)
    if [ -e $input ];
    then
        if [ $DEBUG_TYPE -eq 1 ];then
            echo "lnlamp: message: Profiling will use the $input file ."
        fi
        {
            { ${timing} ./____lnlamp_ppcg__.exe < $input > ____lnlamp_output_upper ; } 2> ____lnlamp_timing_upper
            { ${timing} ./____lnlamp_ppcg__.exe < $input > ____lnlamp_output_upper ; } 2> ____lnlamp_timing_upper
            for ((i=1; i<$frequency; i++))
            do
                { ${timing} ./____lnlamp_ppcg__.exe < $input >> ____lnlamp_output_upper ; } 2>> ____lnlamp_timing_upper
            done
            rm -f ____lnlamp_ppcg__.exe
        }&
        {
            { ${timing} ./____lnlamp_${rate_array[0]}__.exe < $input > ____lnlamp_output_mix_0 ; } 2> ____lnlamp_timing_mix_0
            { ${timing} ./____lnlamp_${rate_array[0]}__.exe < $input > ____lnlamp_output_mix_0 ; } 2> ____lnlamp_timing_mix_0
            for ((i=1; i<$frequency; i++))
            do
                { ${timing} ./____lnlamp_${rate_array[0]}__.exe < $input >> ____lnlamp_output_mix_0 ; } 2>> ____lnlamp_timing_mix_0
            done
            rm -f ____lnlamp_${rate_array[0]}__.exe
        }&
        {
            { ${timing} ./____lnlamp_${rate_array[1]}__.exe < $input > ____lnlamp_output_mix_1 ; } 2> ____lnlamp_timing_mix_1
            { ${timing} ./____lnlamp_${rate_array[1]}__.exe < $input > ____lnlamp_output_mix_1 ; } 2> ____lnlamp_timing_mix_1
            for ((i=1; i<$frequency; i++))
            do
                { ${timing} ./____lnlamp_${rate_array[1]}__.exe < $input >> ____lnlamp_output_mix_1 ; } 2>> ____lnlamp_timing_mix_1
            done
            rm -f ____lnlamp_${rate_array[1]}__.exe
        }&
        {
            { ${timing} ./____lnlamp_${rate_array[2]}__.exe < $input > ____lnlamp_output_mix_2 ; } 2> ____lnlamp_timing_mix_2
            { ${timing} ./____lnlamp_${rate_array[2]}__.exe < $input > ____lnlamp_output_mix_2 ; } 2> ____lnlamp_timing_mix_2
            for ((i=1; i<$frequency; i++))
            do
                { ${timing} ./____lnlamp_${rate_array[2]}__.exe < $input >> ____lnlamp_output_mix_2 ; } 2>> ____lnlamp_timing_mix_2
            done
            rm -f ____lnlamp_${rate_array[2]}__.exe
        }&
        {
            { ${timing} ./____lnlamp_${rate_array[3]}__.exe < $input > ____lnlamp_output_mix_3 ; } 2> ____lnlamp_timing_mix_3
            { ${timing} ./____lnlamp_${rate_array[3]}__.exe < $input > ____lnlamp_output_mix_3 ; } 2> ____lnlamp_timing_mix_3
            for ((i=1; i<$frequency; i++))
            do
                { ${timing} ./____lnlamp_${rate_array[3]}__.exe < $input >> ____lnlamp_output_mix_3 ; } 2>> ____lnlamp_timing_mix_3
            done
            rm -f ____lnlamp_${rate_array[3]}__.exe
        }&
        wait
        {
            { ${timing} ./____lnlamp_${rate_array[4]}__.exe < $input > ____lnlamp_output_mix_4 ; } 2> ____lnlamp_timing_mix_4
            { ${timing} ./____lnlamp_${rate_array[4]}__.exe < $input > ____lnlamp_output_mix_4 ; } 2> ____lnlamp_timing_mix_4
            for ((i=1; i<$frequency; i++))
            do
                { ${timing} ./____lnlamp_${rate_array[4]}__.exe < $input >> ____lnlamp_output_mix_4 ; } 2>> ____lnlamp_timing_mix_4
            done
            rm -f ____lnlamp_${rate_array[4]}__.exe
        }&
        {
            { ${timing} ./____lnlamp_${rate_array[5]}__.exe < $input > ____lnlamp_output_mix_5 ; } 2> ____lnlamp_timing_mix_5
            { ${timing} ./____lnlamp_${rate_array[5]}__.exe < $input > ____lnlamp_output_mix_5 ; } 2> ____lnlamp_timing_mix_5
            for ((i=1; i<$frequency; i++))
            do
                { ${timing} ./____lnlamp_${rate_array[5]}__.exe < $input >> ____lnlamp_output_mix_5 ; } 2>> ____lnlamp_timing_mix_5
            done
            rm -f ____lnlamp_${rate_array[5]}__.exe
        }&
        {
            { ${timing} ./____lnlamp_${rate_array[6]}__.exe < $input > ____lnlamp_output_mix_6 ; } 2> ____lnlamp_timing_mix_6
            { ${timing} ./____lnlamp_${rate_array[6]}__.exe < $input > ____lnlamp_output_mix_6 ; } 2> ____lnlamp_timing_mix_6
            for ((i=1; i<$frequency; i++))
            do
                { ${timing} ./____lnlamp_${rate_array[6]}__.exe < $input >> ____lnlamp_output_mix_6 ; } 2>> ____lnlamp_timing_mix_6
            done
            rm -f ____lnlamp_${rate_array[6]}__.exe
        }&
        {
            { ${timing} ./____lnlamp_${rate_array[7]}__.exe < $input > ____lnlamp_output_mix_7 ; } 2> ____lnlamp_timing_mix_7
            { ${timing} ./____lnlamp_${rate_array[7]}__.exe < $input > ____lnlamp_output_mix_7 ; } 2> ____lnlamp_timing_mix_7
            for ((i=1; i<$frequency; i++))
            do
                { ${timing} ./____lnlamp_${rate_array[7]}__.exe < $input >> ____lnlamp_output_mix_7 ; } 2>> ____lnlamp_timing_mix_7
            done
            rm -f ____lnlamp_${rate_array[7]}__.exe
        }&
        {
            { ${timing} ./____lnlamp_${rate_array[8]}__.exe < $input > ____lnlamp_output_mix_8 ; } 2> ____lnlamp_timing_mix_8
            { ${timing} ./____lnlamp_${rate_array[8]}__.exe < $input > ____lnlamp_output_mix_8 ; } 2> ____lnlamp_timing_mix_8
            for ((i=1; i<$frequency; i++))
            do
                { ${timing} ./____lnlamp_${rate_array[8]}__.exe < $input >> ____lnlamp_output_mix_8 ; } 2>> ____lnlamp_timing_mix_8
            done
            rm -f ____lnlamp_${rate_array[8]}__.exe
        }&
        wait
    else
        if [ $DEBUG_TYPE -eq 1 ];then
            echo "lnlamp: message: Profiling will not use any input file(which means the program does not require any input)."
        fi
        TASKSET=""
        which taskset > /dev/null
        if [ $? -eq 0 ]; then
            TASKSET="taskset -c "
        fi
        {
            { ${timing} ./____lnlamp_ppcg__.exe > ____lnlamp_output_upper ; } 2> ____lnlamp_timing_upper
            { ${timing} ./____lnlamp_ppcg__.exe > ____lnlamp_output_upper ; } 2> ____lnlamp_timing_upper
            for ((i=1; i<$frequency; i++))
            do
                { ${timing} ./____lnlamp_ppcg__.exe >> ____lnlamp_output_upper ; } 2>> ____lnlamp_timing_upper
            done
            rm -f ____lnlamp_ppcg__.exe
        }&
        {
            { ${timing} ./____lnlamp_${rate_array[0]}__.exe > ____lnlamp_output_mix_0 ; } 2> ____lnlamp_timing_mix_0
            { ${timing} ./____lnlamp_${rate_array[0]}__.exe > ____lnlamp_output_mix_0 ; } 2> ____lnlamp_timing_mix_0
            for ((i=1; i<$frequency; i++))
            do
                { ${timing} ./____lnlamp_${rate_array[0]}__.exe >> ____lnlamp_output_mix_0 ; } 2>> ____lnlamp_timing_mix_0
            done
            rm -f ____lnlamp_${rate_array[0]}__.exe
        }&
        {
            { ${timing} ./____lnlamp_${rate_array[1]}__.exe > ____lnlamp_output_mix_1 ; } 2> ____lnlamp_timing_mix_1
            { ${timing} ./____lnlamp_${rate_array[1]}__.exe > ____lnlamp_output_mix_1 ; } 2> ____lnlamp_timing_mix_1
            for ((i=1; i<$frequency; i++))
            do
                { ${timing} ./____lnlamp_${rate_array[1]}__.exe >> ____lnlamp_output_mix_1 ; } 2>> ____lnlamp_timing_mix_1
            done
            rm -f ____lnlamp_${rate_array[1]}__.exe
        }&
        {
            { ${timing} ./____lnlamp_${rate_array[2]}__.exe > ____lnlamp_output_mix_2 ; } 2> ____lnlamp_timing_mix_2
            { ${timing} ./____lnlamp_${rate_array[2]}__.exe > ____lnlamp_output_mix_2 ; } 2> ____lnlamp_timing_mix_2
            for ((i=1; i<$frequency; i++))
            do
                { ${timing} ./____lnlamp_${rate_array[2]}__.exe >> ____lnlamp_output_mix_2 ; } 2>> ____lnlamp_timing_mix_2
            done
            rm -f ____lnlamp_${rate_array[2]}__.exe
        }&
        {
            { ${timing} ./____lnlamp_${rate_array[3]}__.exe > ____lnlamp_output_mix_3 ; } 2> ____lnlamp_timing_mix_3
            { ${timing} ./____lnlamp_${rate_array[3]}__.exe > ____lnlamp_output_mix_3 ; } 2> ____lnlamp_timing_mix_3
            for ((i=1; i<$frequency; i++))
            do
                { ${timing} ./____lnlamp_${rate_array[3]}__.exe >> ____lnlamp_output_mix_3 ; } 2>> ____lnlamp_timing_mix_3
            done
            rm -f ____lnlamp_${rate_array[3]}__.exe
        }&
        wait
        {
            { ${timing} ./____lnlamp_${rate_array[4]}__.exe > ____lnlamp_output_mix_4 ; } 2> ____lnlamp_timing_mix_4
            { ${timing} ./____lnlamp_${rate_array[4]}__.exe > ____lnlamp_output_mix_4 ; } 2> ____lnlamp_timing_mix_4
            for ((i=1; i<$frequency; i++))
            do
                { ${timing} ./____lnlamp_${rate_array[4]}__.exe >> ____lnlamp_output_mix_4 ; } 2>> ____lnlamp_timing_mix_4
            done
            rm -f ____lnlamp_${rate_array[4]}__.exe
        }&
        {
            { ${timing} ./____lnlamp_${rate_array[5]}__.exe > ____lnlamp_output_mix_5 ; } 2> ____lnlamp_timing_mix_5
            { ${timing} ./____lnlamp_${rate_array[5]}__.exe > ____lnlamp_output_mix_5 ; } 2> ____lnlamp_timing_mix_5
            for ((i=1; i<$frequency; i++))
            do
                { ${timing} ./____lnlamp_${rate_array[5]}__.exe >> ____lnlamp_output_mix_5 ; } 2>> ____lnlamp_timing_mix_5
            done
            rm -f ____lnlamp_${rate_array[5]}__.exe
        }&
        {
            { ${timing} ./____lnlamp_${rate_array[6]}__.exe > ____lnlamp_output_mix_6 ; } 2> ____lnlamp_timing_mix_6
            { ${timing} ./____lnlamp_${rate_array[6]}__.exe > ____lnlamp_output_mix_6 ; } 2> ____lnlamp_timing_mix_6
            for ((i=1; i<$frequency; i++))
            do
                { ${timing} ./____lnlamp_${rate_array[6]}__.exe >> ____lnlamp_output_mix_6 ; } 2>> ____lnlamp_timing_mix_6
            done
            rm -f ____lnlamp_${rate_array[6]}__.exe
        }&
        {
            { ${timing} ./____lnlamp_${rate_array[7]}__.exe > ____lnlamp_output_mix_7 ; } 2> ____lnlamp_timing_mix_7
            { ${timing} ./____lnlamp_${rate_array[7]}__.exe > ____lnlamp_output_mix_7 ; } 2> ____lnlamp_timing_mix_7
            for ((i=1; i<$frequency; i++))
            do
                { ${timing} ./____lnlamp_${rate_array[7]}__.exe >> ____lnlamp_output_mix_7 ; } 2>> ____lnlamp_timing_mix_7
            done
            rm -f ____lnlamp_${rate_array[7]}__.exe
        }&
        {
            { ${timing} ./____lnlamp_${rate_array[8]}__.exe > ____lnlamp_output_mix_8 ; } 2> ____lnlamp_timing_mix_8
            { ${timing} ./____lnlamp_${rate_array[8]}__.exe > ____lnlamp_output_mix_8 ; } 2> ____lnlamp_timing_mix_8
            for ((i=1; i<$frequency; i++))
            do
                { ${timing} ./____lnlamp_${rate_array[8]}__.exe >> ____lnlamp_output_mix_8 ; } 2>> ____lnlamp_timing_mix_8
            done
            rm -f ____lnlamp_${rate_array[8]}__.exe
        }&
        wait
    fi

    # 编译4D检验法程序,如果编译可以通过,则用4d检验法求均值(可以自动去掉偏差),否则,直接求数值平均值.
    gcc -O3 $lnlamp_dir/4d_check.c -o 4d_check.exe > /dev/null 2>&1
    if [ $? -ne 0 ]; 
    then
        echo "lnlamp: WARNING: 4D_Check(4d_check.c) program meets errors, we will use the numerical averages without regard to deviations."
        # 根据Timing_type获取时间
        if [ $timing_type -eq 1 ];
        then
            # 说明程序的输出不是计时结果,删除____lnlamp_output_*
            rm -f ____lnlamp_output_*

            rows=$(awk 'END{print NR}' ____lnlamp_timing_upper);
            if [ $frequency -eq $rows ];
            then
                expr=0.0;
                while read n; 
                do
                    expr=$(echo $expr $n | awk '{ printf("%.10f",$1+$2); }');
                done < ____lnlamp_timing_upper;
                time_upper=$(echo $expr $frequency | awk '{ printf("%.10f",$1/$2); }');
            else
                echo "lnlamp: error: Parsing profile time meets errors."
                exit
            fi
            rm -f ____lnlamp_timing_upper

            rows=$(awk 'END{print NR}' ____lnlamp_timing_mix_0);
            if [ $frequency -eq $rows ];
            then 
                expr=0.0;
                while read n; 
                do
                    expr=$(echo $expr $n | awk '{ printf("%.10f",$1+$2); }');
                done < ____lnlamp_timing_mix_0;
                time_mix_0=$(echo $expr $frequency | awk '{ printf("%.10f",$1/$2); }');
            else
                echo "lnlamp: error: Parsing profile time meets errors."
                exit
            fi
            rm -f ____lnlamp_timing_mix_0

            rows=$(awk 'END{print NR}' ____lnlamp_timing_mix_1);
            if [ $frequency -eq $rows ];
            then 
                expr=0.0;
                while read n; 
                do
                    expr=$(echo $expr $n | awk '{ printf("%.10f",$1+$2); }');
                done < ____lnlamp_timing_mix_1;
                time_mix_1=$(echo $expr $frequency | awk '{ printf("%.10f",$1/$2); }');
            else
                echo "lnlamp: error: Parsing profile time meets errors."
                exit
            fi
            rm -f ____lnlamp_timing_mix_1

            rows=$(awk 'END{print NR}' ____lnlamp_timing_mix_2);
            if [ $frequency -eq $rows ];
            then 
                expr=0.0;
                while read n; 
                do
                    expr=$(echo $expr $n | awk '{ printf("%.10f",$1+$2); }');
                done < ____lnlamp_timing_mix_2;
                time_mix_2=$(echo $expr $frequency | awk '{ printf("%.10f",$1/$2); }');
            else
                echo "lnlamp: error: Parsing profile time meets errors."
                exit
            fi
            rm -f ____lnlamp_timing_mix_2

            rows=$(awk 'END{print NR}' ____lnlamp_timing_mix_3);
            if [ $frequency -eq $rows ];
            then
                expr=0.0;
                while read n;
                do
                    expr=$(echo $expr $n | awk '{ printf("%.10f",$1+$2); }');
                done < ____lnlamp_timing_mix_3;
                time_mix_3=$(echo $expr $frequency | awk '{ printf("%.10f",$1/$2); }');
            else
                echo "lnlamp: error: Parsing profile time meets errors."
                exit
            fi
            rm -f ____lnlamp_timing_mix_3

            rows=$(awk 'END{print NR}' ____lnlamp_timing_mix_4);
            if [ $frequency -eq $rows ];
            then
                expr=0.0;
                while read n;
                do
                    expr=$(echo $expr $n | awk '{ printf("%.10f",$1+$2); }');
                done < ____lnlamp_timing_mix_4;
                time_mix_4=$(echo $expr $frequency | awk '{ printf("%.10f",$1/$2); }');
            else
                echo "lnlamp: error: Parsing profile time meets errors."
                exit
            fi
            rm -f ____lnlamp_timing_mix_4

            rows=$(awk 'END{print NR}' ____lnlamp_timing_mix_5);
            if [ $frequency -eq $rows ];
            then
                expr=0.0;
                while read n;
                do
                    expr=$(echo $expr $n | awk '{ printf("%.10f",$1+$2); }');
                done < ____lnlamp_timing_mix_5;
                time_mix_5=$(echo $expr $frequency | awk '{ printf("%.10f",$1/$2); }');
            else
                echo "lnlamp: error: Parsing profile time meets errors."
                exit
            fi
            rm -f ____lnlamp_timing_mix_5

            rows=$(awk 'END{print NR}' ____lnlamp_timing_mix_6);
            if [ $frequency -eq $rows ];
            then
                expr=0.0;
                while read n;
                do
                    expr=$(echo $expr $n | awk '{ printf("%.10f",$1+$2); }');
                done < ____lnlamp_timing_mix_6;
                time_mix_6=$(echo $expr $frequency | awk '{ printf("%.10f",$1/$2); }');
            else
                echo "lnlamp: error: Parsing profile time meets errors."
                exit
            fi
            rm -f ____lnlamp_timing_mix_6

            rows=$(awk 'END{print NR}' ____lnlamp_timing_mix_7);
            if [ $frequency -eq $rows ];
            then
                expr=0.0;
                while read n;
                do
                    expr=$(echo $expr $n | awk '{ printf("%.10f",$1+$2); }');
                done < ____lnlamp_timing_mix_7;
                time_mix_7=$(echo $expr $frequency | awk '{ printf("%.10f",$1/$2); }');
            else
                echo "lnlamp: error: Parsing profile time meets errors."
                exit
            fi
            rm -f ____lnlamp_timing_mix_7

            rows=$(awk 'END{print NR}' ____lnlamp_timing_mix_8);
            if [ $frequency -eq $rows ];
            then
                expr=0.0;
                while read n;
                do
                    expr=$(echo $expr $n | awk '{ printf("%.10f",$1+$2); }');
                done < ____lnlamp_timing_mix_8;
                time_mix_8=$(echo $expr $frequency | awk '{ printf("%.10f",$1/$2); }');
            else
                echo "lnlamp: error: Parsing profile time meets errors."
                exit
            fi
            rm -f ____lnlamp_timing_mix_8
        else
            # 说明程序的输出是计时结果,则删除____lnlamp_timing_*
            rm -f ____lnlamp_timing_*

            rows=$(awk 'END{print NR}' ____lnlamp_output_upper);
            if [ $frequency -eq $rows ];
            then 
                expr=0.0;
                while read n; 
                do
                    expr=$(echo $expr $n | awk '{ printf("%.10f",$1+$2); }');
                done < ____lnlamp_output_upper;
                time_upper=$(echo $expr $frequency | awk '{ printf("%.10f",$1/$2); }');
            else
                echo "lnlamp: error: Parsing profile time meets errors."
                exit
            fi
            rm -f ____lnlamp_output_upper

            rows=$(awk 'END{print NR}' ____lnlamp_output_mix_0);
            if [ $frequency -eq $rows ];
            then 
                expr=0.0;
                while read n; 
                do
                    expr=$(echo $expr $n | awk '{ printf("%.10f",$1+$2); }');
                done < ____lnlamp_output_mix_0;
                time_mix_0=$(echo $expr $frequency | awk '{ printf("%.10f",$1/$2); }');
            else
                echo "lnlamp: error: Parsing profile time meets errors."
                exit
            fi
            rm -f ____lnlamp_output_mix_0

            rows=$(awk 'END{print NR}' ____lnlamp_output_mix_1);
            if [ $frequency -eq $rows ];
            then 
                expr=0.0;
                while read n; 
                do
                    expr=$(echo $expr $n | awk '{ printf("%.10f",$1+$2); }');
                done < ____lnlamp_output_mix_1;
                time_mix_1=$(echo $expr $frequency | awk '{ printf("%.10f",$1/$2); }');
            else
                echo "lnlamp: error: Parsing profile time meets errors."
                exit
            fi
            rm -f ____lnlamp_output_mix_1

            rows=$(awk 'END{print NR}' ____lnlamp_output_mix_2);
            if [ $frequency -eq $rows ];
            then 
                expr=0.0;
                while read n; 
                do
                    expr=$(echo $expr $n | awk '{ printf("%.10f",$1+$2); }');
                done < ____lnlamp_output_mix_2;
                time_mix_2=$(echo $expr $frequency | awk '{ printf("%.10f",$1/$2); }');
            else
                echo "lnlamp: error: Parsing profile time meets errors."
                exit
            fi
            rm -f ____lnlamp_output_mix_2

            rows=$(awk 'END{print NR}' ____lnlamp_output_mix_3);
            if [ $frequency -eq $rows ];
            then
                expr=0.0;
                while read n;
                do
                    expr=$(echo $expr $n | awk '{ printf("%.10f",$1+$2); }');
                done < ____lnlamp_output_mix_3;
                time_mix_3=$(echo $expr $frequency | awk '{ printf("%.10f",$1/$2); }');
            else
                echo "lnlamp: error: Parsing profile time meets errors."
                exit
            fi
            rm -f ____lnlamp_output_mix_3

            rows=$(awk 'END{print NR}' ____lnlamp_output_mix_4);
            if [ $frequency -eq $rows ];
            then
                expr=0.0;
                while read n;
                do
                    expr=$(echo $expr $n | awk '{ printf("%.10f",$1+$2); }');
                done < ____lnlamp_output_mix_4;
                time_mix_4=$(echo $expr $frequency | awk '{ printf("%.10f",$1/$2); }');
            else
                echo "lnlamp: error: Parsing profile time meets errors."
                exit
            fi
            rm -f ____lnlamp_output_mix_4

            rows=$(awk 'END{print NR}' ____lnlamp_output_mix_5);
            if [ $frequency -eq $rows ];
            then
                expr=0.0;
                while read n;
                do
                    expr=$(echo $expr $n | awk '{ printf("%.10f",$1+$2); }');
                done < ____lnlamp_output_mix_5;
                time_mix_5=$(echo $expr $frequency | awk '{ printf("%.10f",$1/$2); }');
            else
                echo "lnlamp: error: Parsing profile time meets errors."
                exit
            fi
            rm -f ____lnlamp_output_mix_5

            rows=$(awk 'END{print NR}' ____lnlamp_output_mix_6);
            if [ $frequency -eq $rows ];
            then
                expr=0.0;
                while read n;
                do
                    expr=$(echo $expr $n | awk '{ printf("%.10f",$1+$2); }');
                done < ____lnlamp_output_mix_6;
                time_mix_6=$(echo $expr $frequency | awk '{ printf("%.10f",$1/$2); }');
            else
                echo "lnlamp: error: Parsing profile time meets errors."
                exit
            fi
            rm -f ____lnlamp_output_mix_6

            rows=$(awk 'END{print NR}' ____lnlamp_output_mix_7);
            if [ $frequency -eq $rows ];
            then
                expr=0.0;
                while read n;
                do
                    expr=$(echo $expr $n | awk '{ printf("%.10f",$1+$2); }');
                done < ____lnlamp_output_mix_7;
                time_mix_7=$(echo $expr $frequency | awk '{ printf("%.10f",$1/$2); }');
            else
                echo "lnlamp: error: Parsing profile time meets errors."
                exit
            fi
            rm -f ____lnlamp_output_mix_7

            rows=$(awk 'END{print NR}' ____lnlamp_output_mix_8);
            if [ $frequency -eq $rows ];
            then
                expr=0.0;
                while read n;
                do
                    expr=$(echo $expr $n | awk '{ printf("%.10f",$1+$2); }');
                done < ____lnlamp_output_mix_8;
                time_mix_8=$(echo $expr $frequency | awk '{ printf("%.10f",$1/$2); }');
            else
                echo "lnlamp: error: Parsing profile time meets errors."
                exit
            fi
            rm -f ____lnlamp_output_mix_8
        fi
    # 4D检查程序可以使用.
    else
        # 根据Timing_type获取时间
        if [ $timing_type -eq 1 ];
        then
            # 说明程序的输出不是计时结果,删除____lnlamp_output_*
            rm -f ____lnlamp_output_*
            time_upper=`./4d_check.exe ____lnlamp_timing_upper`
            time_mix_0=`./4d_check.exe ____lnlamp_timing_mix_0`
            time_mix_1=`./4d_check.exe ____lnlamp_timing_mix_1`
            time_mix_2=`./4d_check.exe ____lnlamp_timing_mix_2`
            time_mix_3=`./4d_check.exe ____lnlamp_timing_mix_3`
            time_mix_4=`./4d_check.exe ____lnlamp_timing_mix_4`
            time_mix_5=`./4d_check.exe ____lnlamp_timing_mix_5`
            time_mix_6=`./4d_check.exe ____lnlamp_timing_mix_6`
            time_mix_7=`./4d_check.exe ____lnlamp_timing_mix_7`
            time_mix_8=`./4d_check.exe ____lnlamp_timing_mix_8`
            # 用完删掉
            rm -f ____lnlamp_timing_*
        else
            # 说明程序的输出是计时结果,则删除____lnlamp_timing_*
            rm -f ____lnlamp_timing_*
            time_upper=`./4d_check.exe ____lnlamp_output_upper`
            time_mix_0=`./4d_check.exe ____lnlamp_output_mix_0`
            time_mix_1=`./4d_check.exe ____lnlamp_output_mix_1`
            time_mix_2=`./4d_check.exe ____lnlamp_output_mix_2`
            time_mix_3=`./4d_check.exe ____lnlamp_output_mix_3`
            time_mix_4=`./4d_check.exe ____lnlamp_output_mix_4`
            time_mix_5=`./4d_check.exe ____lnlamp_output_mix_5`
            time_mix_6=`./4d_check.exe ____lnlamp_output_mix_6`
            time_mix_7=`./4d_check.exe ____lnlamp_output_mix_7`
            time_mix_8=`./4d_check.exe ____lnlamp_output_mix_8`
            # rm -f ____lnlamp_output_*
        fi
        rm -f 4d_check.exe
    fi
    if [ $DEBUG_TYPE -eq 1 ];then
        echo "lnlamp: message: Profiling times is(s): $time_upper $time_mix_0 $time_mix_1 $time_mix_2 $time_mix_3 $time_mix_4 $time_mix_5 $time_mix_6 $time_mix_7 $time_mix_8. "
    fi
    time_array+=( $(echo $time_upper $time_mix_0 | awk '{ printf("%.10f", $1-$2 ); }') );
    time_array+=( $(echo $time_upper $time_mix_1 | awk '{ printf("%.10f", $1-$2 ); }') );
    time_array+=( $(echo $time_upper $time_mix_2 | awk '{ printf("%.10f", $1-$2 ); }') );
    time_array+=( $(echo $time_upper $time_mix_3 | awk '{ printf("%.10f", $1-$2 ); }') );
    time_array+=( $(echo $time_upper $time_mix_4 | awk '{ printf("%.10f", $1-$2 ); }') );
    time_array+=( $(echo $time_upper $time_mix_5 | awk '{ printf("%.10f", $1-$2 ); }') );
    time_array+=( $(echo $time_upper $time_mix_6 | awk '{ printf("%.10f", $1-$2 ); }') );
    time_array+=( $(echo $time_upper $time_mix_7 | awk '{ printf("%.10f", $1-$2 ); }') );
    time_array+=( $(echo $time_upper $time_mix_8 | awk '{ printf("%.10f", $1-$2 ); }') );

    python3 $lnlamp_dir/lnlamp_internal_usage.py ${rate_array[0]} ${time_array[0]} ${rate_array[1]} ${time_array[1]} ${rate_array[2]} ${time_array[2]} ${rate_array[3]} ${time_array[3]} ${rate_array[4]} ${time_array[4]} ${rate_array[5]} ${time_array[5]} ${rate_array[6]} ${time_array[6]} ${rate_array[7]} ${time_array[7]} ${rate_array[8]} ${time_array[8]} > lnlamp_internal_usage.py.log 2>&1
    if [ $? -ne 0 ]; then
        echo "lnlamp: error: Quadratic curve fitting(lnlamp_internal_usage.py) problems encountered!"
        echo "lnlamp: Quadratic curve fitting parameter is: ${rate_array[0]} ${time_array[0]} ${rate_array[1]} ${time_array[1]} ${rate_array[2]} ${time_array[2]} ${rate_array[3]} ${time_array[3]} ${rate_array[4]} ${time_array[4]} ${rate_array[5]} ${time_array[5]} ${rate_array[6]} ${time_array[6]} ${rate_array[7]} ${time_array[7]} ${rate_array[8]} ${time_array[8]} "
        exit
    fi
    #如果文件不存在，创建文件夹
    if [ ! -e "lnlamp_temp_result.txt" ]; then
        echo "lnlamp: error: Quadratic curve fitting(lnlamp_internal_usage.py) can't calculate the result!!!"
    else
        rows=$(awk 'END{print NR}' lnlamp_temp_result.txt);
        if [ 4 -eq $rows ];
        then
            poly_coeff=()
            while read n;
            do
                poly_coeff+=( $n )
            done < lnlamp_temp_result.txt;
            extremeValue=$(echo ${poly_coeff[3]} | awk '{ printf("%.10f",$1); }');
            equ_a=$(echo ${poly_coeff[2]} | awk '{ printf("%.10f",$1); }');
            equ_b=$(echo ${poly_coeff[1]} | awk '{ printf("%.10f",$1); }');
            equ_c=$(echo ${poly_coeff[0]} | awk '{ printf("%.10f",$1); }');
        else
            echo "lnlamp: error: The result of the calculation in quadratic curve fitting(lnlamp_internal_usage.py) is wrong!!!"
        fi
    fi
    
    if [ $DEBUG_TYPE -eq 1 ];then
        echo "lnlamp: message: Quadratic curve fitting parameter is: ${rate_array[0]} ${time_array[0]} ${rate_array[1]} ${time_array[1]} ${rate_array[2]} ${time_array[2]} ${rate_array[3]} ${time_array[3]} ${rate_array[4]} ${time_array[4]} ${rate_array[5]} ${time_array[5]} ${rate_array[6]} ${time_array[6]} ${rate_array[7]} ${time_array[7]} ${rate_array[8]} ${time_array[8]}. "
        echo "lnlamp: message: Quadratic curve fitting's result  is: pi(r) = $equ_a * r^2 + $equ_b * r + $equ_c, the extreme value point is located at r = $extremeValue. "
    fi
fi
unset time_array
end=`date +%s%N`
time_profiling=$((($end-$start)/1000000)) # 毫秒



# Step3: 根据抛物线和Profiling结果,确定最合适的Rate值
# 使用 date +%s%N 可以获得一个纳秒级的unix时间戳(当前时间), 进行计时
start=`date +%s%N`
# 3.1 先确定最合适的Rate的可能取值
best_rate=()
# 如果开口向下且对称轴小于0、或者开头向上且对称轴大于99,那么就是收益模型单调下降.
if ([ $(echo "$extremeValue < 0" | bc) -eq 1 ] && [ $(echo "$equ_a < 0" | bc) -eq 1 ]) || ([ $(echo "$extremeValue > 99" | bc) -eq 1 ] && [ $(echo "$equ_a > 0" | bc) -eq 1 ]);
then
    best_rate+=( 0 )
# 如果开口向下且对称轴大于99、或者开头向上且对称轴小于0,那么就是收益模型单调上升.
elif ([ $(echo "$extremeValue > 99" | bc) -eq 1 ] && [ $(echo "$equ_a < 0" | bc) -eq 1 ]) || ([ $(echo "$extremeValue < 0" | bc) -eq 1 ] && [ $(echo "$equ_a > 0" | bc) -eq 1 ]);
then
    best_rate+=( 99 )
# 如果对称轴介于0和99中间,且开头是向下的话,那么对称轴附近的比例值就是结果
elif [ $(echo "$equ_a < 0" | bc) -eq 1 ];
then
    best_rate+=( $(echo $extremeValue | cut -d '.' -f1) );
# 如果对称轴介于0和99中间,且开头是向上的话,那么同样也不适合做混合精度.
else
    best_rate+=( 0 )
    best_rate+=( 99 )
fi
# 3.2 对可能的取值做预测(推理) [也可以做Profiling(注释掉的代码部分)]
best_incomes=()
for rate in ${best_rate[@]}; 
do
    income=( $(echo $rate $equ_a $equ_b $equ_c | awk '{ printf("%.10f", $2*$1*$1+$3*$1+$4 ); }') );
    if [ $DEBUG_TYPE -eq 1 ];then
        echo "lnlamp: message: The predicted time benefit  is: ${income}s, when rate =${rate}. "
    fi
    best_incomes+=( $income )
    unset income
done
end=`date +%s%N`
time_inference=$((($end-$start)/1000000)) # 毫秒
# 打印耗时情况
if [ $DEBUG_TYPE -eq 1 ];then
    echo "lnlamp: message: The profiling timeConsuming is: ${time_profiling}ms, the inference timeConsuming is: ${time_inference}ms. "
    echo ""
fi



# Step4: 打印最终结果.
if [ ${#best_incomes[@]} -eq 1 ];
then
    if [ $(echo "${best_incomes[@]} > 0.0" | bc) -eq 1 ];
    then 
        # 如果是单调下降
        if [ ${best_rate[@]} -eq 0 ];
        then
            echo "The performance of the lnlamp programs decreases monotonically with increasing Rate, so the Rate 0 is the best. "
            # 生成最合适比例下对应的混合精度代码提供给用户
            ppcg --target c -R ${best_rate[@]} ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} $src_args -o ${target_file} > /dev/null 2>&1
            if [ $? -ne 0 ]; then
                echo "lnlamp: error: PPCG Codegen meets errors at the end."
                echo "lnlamp: error: The PPCG CMD is : ppcg --target c -R ${best_rate[@]} ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} $src_args -o ${target_file}."
                exit
            fi
            echo "Now, We have automatically generated a mixed precision program (${target_file})at this Ratio(${best_rate[@]}). "
        # 如果是单调上升
        elif [ ${best_rate[@]} -eq 99 ];
        then
            echo "The performance of the lnlamp program rises monotonically with increasing Rate(which means it isn't suitable for mixed precision optimization), so the original program is probably the best. "
        # 如果是二次关系
        else
            echo "The performance of the lnlamp program shows a quadratic relationship with the Rate, so the integer value around Rate ($extremeValue) is probably the most appropriate ratio. "
            # 生成最合适比例下对应的混合精度代码提供给用户
            ppcg --target c -R ${best_rate[@]} ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} $src_args -o ${target_file} > /dev/null 2>&1
            if [ $? -ne 0 ]; then
                echo "lnlamp: error: PPCG Codegen meets errors at the end."
                echo "lnlamp: error: The PPCG CMD is : ppcg --target c -R ${best_rate[@]} ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} $src_args -o ${target_file}."
                exit
            fi
            echo "Now, We have automatically generated a mixed precision program (${target_file})at this Ratio(${best_rate[@]}). "
        fi
    else
        echo "Unfortunately, we did not find the most suitable mixed precision Rate for this program. So the original program is probably the best. "
    fi
else
    max_income=0.0
    max_income_id=-1.0
    # 确定一下最大收益及其对应的下标
    for ((i=0;i<${#best_incomes[@]};i++));
    do
        if [ $(echo "${best_incomes[$i]} > ${max_income}" | bc) -eq 1 ];
        then
            max_income=${best_incomes[$i]};
            max_income_id=$i;
        fi
    done
    # 根据最大收益,确定适不适合做混合精度
    if [ $(echo "${max_income} > 0.0" | bc) -eq 1 ];
    then
        echo "The performance of the lnlamp program shows a quadratic relationship with the Rate, so the integer value around Rate (${best_rate[$max_income_id]}) is probably the most appropriate ratio. "  
        # 生成最合适比例下对应的混合精度代码提供给用户
        ppcg --target c -R ${best_rate[$max_income_id]} ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} $src_args -o ${target_file} > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "lnlamp: error: PPCG Codegen meets errors at the end."
            echo "lnlamp: error: ppcg --target c -R ${best_rate[$max_income_id]} ${PPCG_TILE_FLAGS} ${PPCG_OPENMP_FLAGS} $src_args -o ${target_file}."
            exit
        fi
        echo "Now, We have automatically generated a mixed precision program (${target_file})at this Ratio(${best_rate[$max_income_id]}). "
    else
        echo "The performance of the lnlamp program shows a quadratic relationship with the Rate, Unfortunately, we did not find the most suitable mixed precision Rate for this program. So the original program is probably the best. "
    fi
fi
echo ""
